#!/usr/bin/env python3
"""
BiSEMPGS Parameter Processing Script

This script processes the CSV files generated by extract_bisem_parameters.R
and computes genetic nurture effects (phi and rho variables).

The genetic nurture effects are computed as:
- phi = 4*f*delta*k*delta'*f' (pure observed genetic nurture effects)
- rho = 4*f*a*j*a'*f' (pure latent genetic nurture effects)

where:
- f is the factor loading matrix (f11, f12, f21, f22)
- delta is the square root of the heritability matrix (delta11, delta22)
- k is the genetic correlation matrix (k11, k12, k22)
- a is the square root of the latent heritability matrix (a11, a22)
- j is the latent genetic correlation matrix (assumed same as k)
"""

import pandas as pd
import numpy as np
import os
import sys

def compute_genetic_nurture_effects(df):
    """
    Compute genetic nurture effects for BiSEMPGS parameters.
    
    Args:
        df: DataFrame with BiSEMPGS parameter estimates
        
    Returns:
        DataFrame with added phi and rho columns
    """
    
    print(f"Computing genetic nurture effects for {len(df)} rows...")
    
    # Required parameter columns
    required_params = ['f11', 'f12', 'f21', 'f22', 'delta11', 'delta22', 'a11', 'a22', 'k11', 'k12', 'k22']
    
    # Check if all required parameters exist
    missing_params = [param for param in required_params if param not in df.columns]
    if missing_params:
        print(f"Warning: Missing required parameters: {missing_params}")
        return df
    
    # Fix missing k11, k22 values - these are typically 1.0 for standardized traits
    k11_missing = df['k11'].isna().all()
    k22_missing = df['k22'].isna().all()
    
    if k11_missing or k22_missing:
        print(f"k11 missing: {k11_missing}, k22 missing: {k22_missing}")
        print("Setting k11=0.5 and k22=0.5 (heritability values)")
        df.loc[df['k11'].isna(), 'k11'] = 0.5
        df.loc[df['k22'].isna(), 'k22'] = 0.5

    successful_computations = 0
    
    # Initialize phi and rho columns
    for col in ['phi11', 'phi12', 'phi21', 'phi22', 'rho11', 'rho12', 'rho21', 'rho22']:
        df[col] = np.nan
    
    # Compute genetic nurture effects for each row
    for i in range(len(df)):
        try:
            # Extract required parameters for this row
            f11, f12, f21, f22 = df.iloc[i]['f11'], df.iloc[i]['f12'], df.iloc[i]['f21'], df.iloc[i]['f22']
            delta11, delta22 = df.iloc[i]['delta11'], df.iloc[i]['delta22']
            a11, a22 = df.iloc[i]['a11'], df.iloc[i]['a22']
            k11, k12, k22 = df.iloc[i]['k11'], df.iloc[i]['k12'], df.iloc[i]['k22']
            
            # Debug first few rows
            if i < 3:
                print(f"Row {i} parameters:")
                print(f"  f: {f11}, {f12}, {f21}, {f22}")
                print(f"  delta: {delta11}, {delta22}")
                print(f"  a: {a11}, {a22}")
                print(f"  k: {k11}, {k12}, {k22}")
            
            # Check for missing values
            params = [f11, f12, f21, f22, delta11, delta22, a11, a22, k11, k12, k22]
            if any(pd.isna(param) for param in params):
                if i < 3:
                    missing = [i for i, param in enumerate(params) if pd.isna(param)]
                    param_names = ['f11', 'f12', 'f21', 'f22', 'delta11', 'delta22', 'a11', 'a22', 'k11', 'k12', 'k22']
                    print(f"Row {i}: Missing parameters: {[param_names[j] for j in missing]}")
                continue
            
            # Create matrices from the estimates
            f_mat = np.array([[f11, f12], 
                             [f21, f22]])
            
            delta_mat = np.array([[delta11, 0], 
                                 [0, delta22]])
            
            a_mat = np.array([[a11, 0], 
                             [0, a22]])
            
            k_mat = np.array([[k11, k12], 
                             [k12, k22]])
            
            # For j_mat, using the same as k_mat (genetic correlation matrix)
            j_mat = k_mat.copy()
            
            # Compute pure observed genetic nurture effects: phi = 4*f*delta*k*delta'*f'
            phi_mat = f_mat @ delta_mat @ k_mat @ delta_mat.T @ f_mat.T * 4
            df.loc[i, 'phi11'] = phi_mat[0, 0]
            df.loc[i, 'phi12'] = phi_mat[0, 1]
            df.loc[i, 'phi21'] = phi_mat[1, 0]
            df.loc[i, 'phi22'] = phi_mat[1, 1]
            
            # Compute pure latent genetic nurture effects: rho = 4*f*a*j*a'*f'
            rho_mat = f_mat @ a_mat @ j_mat @ a_mat.T @ f_mat.T * 4
            df.loc[i, 'rho11'] = rho_mat[0, 0]
            df.loc[i, 'rho12'] = rho_mat[0, 1]
            df.loc[i, 'rho21'] = rho_mat[1, 0]
            df.loc[i, 'rho22'] = rho_mat[1, 1]
            
            if i < 3:
                print(f"Row {i} results: phi11={phi_mat[0, 0]:.6f}, phi12={phi_mat[0, 1]:.6f}")
                print(f"Row {i} results: rho11={rho_mat[0, 0]:.6f}, rho12={rho_mat[0, 1]:.6f}")
            
            successful_computations += 1
            
        except Exception as e:
            print(f"Error computing genetic nurture effects for row {i}: {str(e)}")
            continue
    
    print(f"Successfully computed genetic nurture effects for {successful_computations}/{len(df)} rows")
    
    return df

def process_file(input_file, output_file):
    """Process a single BiSEMPGS parameter file."""
    print(f"Processing: {input_file}")
    
    # Load the data
    df = pd.read_csv(input_file)
    print(f"  Loaded {len(df)} rows with {len(df.columns)} columns")
    
    # Compute genetic nurture effects
    df_with_effects = compute_genetic_nurture_effects(df)
    
    # Save the enhanced data
    df_with_effects.to_csv(output_file, index=False)
    print(f"  Saved enhanced data to: {output_file}")
    
    # Print summary statistics
    phi_rho_cols = ['phi11', 'phi12', 'phi21', 'phi22', 'rho11', 'rho12', 'rho21', 'rho22']
    print("Summary of genetic nurture effects:")
    print(df_with_effects[phi_rho_cols].describe())
    
    return df_with_effects

def main():
    """Main processing function."""
    print("="*80)
    print("BiSEMPGS PARAMETER PROCESSING")
    print("Computing genetic nurture effects (phi and rho variables)")
    print("="*80)
    
    # Define the files to process
    files_to_process = [
        ("Analysis/BiSEMPGS/05_t1pheVTnoAM_t2socVTnoAM_PGSall_parameters.csv", "all_conditions_parameters_with_effects.csv", "Combined conditions 5-8"),
        ("Analysis/BiSEMPGS/05_t1pheVTnoAM_t2socVTnoAM_PGSall_parameters.csv", "05_t1pheVTnoAM_t2socVTnoAM_PGSall_parameters_with_effects.csv", "Condition 5: 05_t1pheVTnoAM_t2socVTnoAM_PGSall"),
        ("Analysis/BiSEMPGS/06_t1noVTpheAM_t2pheVTpheAM_PGSall_parameters.csv", "06_t1noVTpheAM_t2pheVTpheAM_PGSall_parameters_with_effects.csv", "Condition 6: 06_t1noVTpheAM_t2pheVTpheAM_PGSall"),
        ("Analysis/BiSEMPGS/07_t1noVTsocAM_t2pheVTsocAM_PGSall_parameters.csv", "07_t1noVTsocAM_t2pheVTsocAM_PGSall_parameters_with_effects.csv", "Condition 7: 07_t1noVTsocAM_t2pheVTsocAM_PGSall"),
        ("Analysis/BiSEMPGS/08_t1noVTgenAM_t2pheVTgenAM_PGSall_parameters.csv", "08_t1noVTgenAM_t2pheVTgenAM_PGSall_parameters_with_effects.csv", "Condition 8: 08_t1noVTgenAM_t2pheVTgenAM_PGSall")
    ]
    
    processed_files = 0
    
    for input_file, output_file, description in files_to_process:
        print("\n" + "-"*60)
        print(f"Processing: {description}")
        print(f"Input: {input_file}")
        print(f"Output: {output_file}")
        print()
        
        if os.path.exists(input_file):
            try:
                process_file(input_file, output_file)
                processed_files += 1
            except Exception as e:
                print(f"ERROR processing {input_file}: {str(e)}")
        else:
            print(f"WARNING: Input file not found: {input_file}")
    
    print("\n" + "-"*60)
    print("Creating summary statistics for genetic nurture effects...")
    
    print("\n" + "="*80)
    print("PROCESSING COMPLETE!")
    print(f"Successfully processed: {processed_files}/{len(files_to_process)} files")
    print(f"Output files saved to: {os.getcwd()}")
    print("="*80)

if __name__ == "__main__":
    main()